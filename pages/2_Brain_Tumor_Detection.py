import streamlit as st
import cv2
import numpy as np
from PIL import Image, ImageOps
from ultralytics import YOLO
import torch
import io
from utils import load_image_from_url, create_threshold_slider
from urllib.parse import urlparse

st.set_page_config(page_title="Brain Tumor Detection", page_icon="üß†", layout="wide")

@st.cache_resource
def load_brain_model(model_type):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞"""
    try:
        model_path = f'weights/{model_type}.pt'
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_type}: {e}")
        return None





def draw_detections(image, results, confidence_threshold):
    """–†–∏—Å—É–µ–º bounding boxes –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    image_array = np.array(image)
    
    detections = []
    for box in results[0].boxes:
        if box.conf >= confidence_threshold:
            x1, y1, x2, y2 = map(int, box.xyxy[0].cpu().numpy())
            confidence = float(box.conf)
            
            # –†–∏—Å—É–µ–º bounding box
            cv2.rectangle(image_array, (x1, y1), (x2, y2), (0, 255, 0), 3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            label = f"Tumor: {confidence:.3f}"
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)[0]
            cv2.rectangle(image_array, (x1, y1 - label_size[1] - 10), 
                         (x1 + label_size[0], y1), (0, 255, 0), -1)
            cv2.putText(image_array, label, (x1, y1 - 5), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
            
            detections.append({
                'bbox': [x1, y1, x2, y2],
                'confidence': confidence,
                'area': (x2 - x1) * (y2 - y1)
            })
    
    return Image.fromarray(image_array), detections

def process_brain_image(image, model, confidence_threshold):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    results = model(image, conf=confidence_threshold)
    
    if len(results[0].boxes) > 0:
        result_image, detections = draw_detections(image, results, confidence_threshold)
        detection_info = {
            'tumors_count': len(detections),
            'detections': detections
        }
        return result_image, detection_info, True
    else:
        return image, {'tumors_count': 0, 'detections': []}, False

def main():
    st.title("üß† –î–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞")
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    with st.expander("‚ÑπÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"):
        st.image("graphics/brain.jpeg", use_container_width=True)
        st.markdown("""
        
        - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: YOLOv12m
        - –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: 38.9MB
        - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: Axial, Coronal, Sagittal, Brain All
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: 2 (positive,negative)
        - –ó–∞–¥–∞—á–∞: –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_type = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ú–†–¢:",
        ["axial", "coronal", "sagittal", "brain_all"],
        index=0,
        help="Axial - –ø–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Å—Ä–µ–∑—ã, Coronal - —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–µ, Sagittal - –±–æ–∫–æ–≤—ã–µ, Brain All - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å"
    )
    
    confidence_threshold = create_threshold_slider(
        "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
        default_value=0.4,
        help_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö–æ–ª–∏"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = load_brain_model(model_type)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    tab1, tab2 = st.tabs(["üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ URL"])
    
    with tab1:
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            type=['jpg', 'jpeg', 'png', 'tiff'],
            accept_multiple_files=True,
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, TIFF"
        )
    
    with tab2:
        url_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ URL –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            placeholder="https://example.com/brain_scan.jpg",
            help="–í–≤–µ–¥–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
        
        url_files = None
        if url_input:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL..."):
                image, error = load_image_from_url(url_input)
                if image:
                    # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
                    url_files = [type('MockFile', (), {
                        'name': url_input.split('/')[-1] or 'url_mri_image.jpg'
                    })]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ session_state
                    st.session_state.url_mri_image = image
                    st.success("‚úÖ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.error(f"‚ùå {error}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if uploaded_files or url_files:
        if uploaded_files and url_files:
            all_files = uploaded_files + url_files
        elif uploaded_files:
            all_files = uploaded_files
        else:
            all_files = url_files
        uploaded_files = all_files
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if uploaded_files:
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª(–æ–≤)")
        
        for idx, uploaded_file in enumerate(uploaded_files):
            st.subheader(f"üß† –ú–†–¢ {idx + 1}: {uploaded_file.name}")
            st.caption(f"–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏: {model_type.upper()}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if hasattr(uploaded_file, 'read'):
                    # –û–±—ã—á–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    image = Image.open(uploaded_file).convert('RGB')
                else:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL (–∏–∑ session_state)
                    image = st.session_state.url_mri_image
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–û—Ä–∏–≥–∏–Ω–∞–ª:**")
                    st.image(image, use_container_width=True)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –ú–†–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    result_image, detection_info, tumors_found = process_brain_image(
                        image, model, confidence_threshold
                    )
                
                with col2:
                    st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏:**")
                    st.image(result_image, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.markdown("**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**")
                if tumors_found:
                    st.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—É—Ö–æ–ª–µ–π: {detection_info['tumors_count']}")
                else:
                    st.success("‚úÖ –û–ø—É—Ö–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                img_buffer = io.BytesIO()
                result_image.save(img_buffer, format='PNG')
                img_buffer.seek(0)
                
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞",
                    data=img_buffer.getvalue(),
                    file_name=f"analyzed_{uploaded_file.name}",
                    mime="image/png"
                )
                
                st.divider()
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {uploaded_file.name}: {e}")
    
    else:
        pass

if __name__ == "__main__":
    main() 