import streamlit as st
import cv2
import numpy as np
from PIL import Image, ImageOps
from ultralytics import YOLO
import torch
import io
from utils import load_image_from_url, create_threshold_slider

st.set_page_config(page_title="Face Detection", page_icon="üë§", layout="wide")

@st.cache_resource
def load_face_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        model = YOLO('weights/face.pt')
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def fix_image_orientation(image):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ EXIF –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = ImageOps.exif_transpose(image)
        return image
    except Exception:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return image

def apply_face_mask(image, boxes, confidence_threshold=0.5):
    """–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –±–ª—é—Ä–∞ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞"""
    image_array = np.array(image)
    
    for box in boxes:
        if box.conf >= confidence_threshold:
            x1, y1, x2, y2 = map(int, box.xyxy[0].cpu().numpy())
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            face_region = image_array[y1:y2, x1:x2]
            blurred_face = cv2.GaussianBlur(face_region, (99, 99), 40)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            image_array[y1:y2, x1:x2] = blurred_face
    
    return Image.fromarray(image_array)

def process_image(image, model, confidence_threshold):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    results = model(image, conf=confidence_threshold)
    
    if len(results[0].boxes) > 0:
        masked_image = apply_face_mask(image, results[0].boxes, confidence_threshold)
        detection_info = {
            'faces_count': len(results[0].boxes),
            'confidences': [float(box.conf) for box in results[0].boxes]
        }
        return masked_image, detection_info, True
    else:
        return image, {'faces_count': 0, 'confidences': []}, False

def main():
    st.title("üë§ –î–µ—Ç–µ–∫—Ü–∏—è –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—Ü")
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    with st.expander("‚ÑπÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"):
        st.image("graphics/face.png", use_container_width=True)
        st.markdown("""
        
        - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: YOLOv12n
        - –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: 5.2MB
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: 1 (Human Face)
        - –û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏: 12,880 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - –ó–∞–¥–∞—á–∞: –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = load_face_model()
    if model is None:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Å–æ–≤.")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    confidence_threshold = create_threshold_slider(
        "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
        default_value=0.5,
        help_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    tab1, tab2 = st.tabs(["üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ URL"])
    
    with tab1:
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            type=['jpg', 'jpeg', 'png'],
            accept_multiple_files=True,
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG"
        )
    
    with tab2:
        url_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            placeholder="https://example.com/image.jpg",
            help="–í–≤–µ–¥–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
        
        url_files = None
        if url_input:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL..."):
                image, error = load_image_from_url(url_input)
                if image:
                    # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
                    url_files = [type('MockFile', (), {
                        'name': url_input.split('/')[-1] or 'url_image.jpg'
                    })]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ session_state
                    st.session_state.url_image = image
                    st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.error(f"‚ùå {error}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if uploaded_files or url_files:
        if uploaded_files and url_files:
            all_files = uploaded_files + url_files
        elif uploaded_files:
            all_files = uploaded_files
        else:
            all_files = url_files
        uploaded_files = all_files
    
    if uploaded_files:
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª(–æ–≤)")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for idx, uploaded_file in enumerate(uploaded_files):
            st.subheader(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx + 1}: {uploaded_file.name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                if hasattr(uploaded_file, 'read'):
                    # –û–±—ã—á–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    image = Image.open(uploaded_file).convert('RGB')
                    image = fix_image_orientation(image)
                else:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL (–∏–∑ session_state)
                    image = st.session_state.url_image
                    image = fix_image_orientation(image)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–û—Ä–∏–≥–∏–Ω–∞–ª:**")
                    st.image(image, use_container_width=True)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    masked_image, detection_info, faces_found = process_image(
                        image, model, confidence_threshold
                    )
                
                with col2:
                    st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
                    st.image(masked_image, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.markdown("**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:**")
                if faces_found:
                    st.success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {detection_info['faces_count']}")
                    if detection_info['confidences']:
                        avg_conf = np.mean(detection_info['confidences'])
                        st.info(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.3f}")
                else:
                    st.warning("–õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                img_buffer = io.BytesIO()
                masked_image.save(img_buffer, format='PNG')
                img_buffer.seek(0)
                
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    data=img_buffer.getvalue(),
                    file_name=f"masked_{uploaded_file.name}",
                    mime="image/png"
                )
                
                st.divider()
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {uploaded_file.name}: {e}")
    
    else:
        pass

if __name__ == "__main__":
    main() 